# -*- coding: utf-8 -*-
# Generated by Django 1.9.9 on 2016-10-12 17:37


from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def forward(apps, schema_editor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    URLType = apps.get_model("nadine", "URLType")
    URL = apps.get_model("nadine", "URL")

    # Populate the URL Types
    fb = URLType.objects.create(name="facebook")
    tw = URLType.objects.create(name="twitter")
    li = URLType.objects.create(name="linkedin")
    gh = URLType.objects.create(name="github")
    per = URLType.objects.create(name="personal")
    pro = URLType.objects.create(name="professional")

    for u in User.objects.all():
        if not hasattr(u, 'profile'): continue
        p = u.profile
        if p.url_facebook:
            URL.objects.create(user=u, url_type=fb, url_value=p.url_facebook)
        if p.url_twitter:
            URL.objects.create(user=u, url_type=tw, url_value=p.url_twitter)
        if p.url_linkedin:
            URL.objects.create(user=u, url_type=li, url_value=p.url_linkedin)
        if p.url_github:
            URL.objects.create(user=u, url_type=gh, url_value=p.url_github)
        if p.url_personal:
            URL.objects.create(user=u, url_type=per, url_value=p.url_personal)
        if p.url_professional:
            URL.objects.create(user=u, url_type=pro, url_value=p.url_professional)


def reverse(apps, schema_editor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    URLType = apps.get_model("nadine", "URLType")
    URL = apps.get_model("nadine", "URL")

    for url in URL.objects.all():
        p = url.user.profile
        if url.url_type.name == "facebook":
            p.url_facebook = url.url_value
        if url.url_type.name == "twitter":
            p.url_twitter = url.url_value
        if url.url_type.name == "linkedin":
            p.url_linkedin = url.url_value
        if url.url_type.name == "github":
            p.url_github = url.url_value
        if url.url_type.name == "personal":
            p.url_personal = url.url_value
        if url.url_type.name == "professional":
            p.url_professional = url.url_value


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('nadine', '0017_emailaddress'),
    ]

    operations = [
        migrations.CreateModel(
            name='URL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_value', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='URLType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='url',
            name='url_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nadine.URLType'),
        ),
        migrations.AddField(
            model_name='url',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(forward, reverse),
        migrations.RemoveField(
            model_name='userprofile',
            name='url_facebook',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='url_twitter',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='url_linkedin',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='url_personal',
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='url_professional',
        ),
    ]
